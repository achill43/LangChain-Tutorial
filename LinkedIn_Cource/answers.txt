Byte
 HTML 5 HTML 5
 CSS 3 CSS 3
 JavaScript JavaScript
 Python Python
 PHP PHP
 DataBase DataBase
 Git Git
 Docker Docker
 Unity Unity
 Unreal Engine Unreal Engine
GodotGodot
TypeScriptTypeScript
 Cloud Services Cloud Services
Python запитань на співбесіду
1. Що таке Python?
Перелічіть кілька популярних застосувань Python у світі технологій. Python — це широко поширена мова програмування загального призначення високого рівня. Він був створений Гвідо ван Россумом у 1991 році та вдосконалений Python Software Foundation. Його розроблено з акцентом на зручності читання коду, а його синтаксис дозволяє програмістам висловлювати свої концепції в меншій кількості рядків коду.

Він використовується для:

 Системний сценарій
 Веб-розробка
 Розробка ігор
 Розробка програмного забезпечення
 Комплексна математика
Машине навчання
2. Які переваги використання мови Python як інструменту в поточному сценарії?
Нижче наведено переваги використання мови Python

 Системний сценарій
 Веб-розробка
 Розробка ігор
 Розробка програмного забезпечення
 Комплексна математика
3. Чи є Python компільованою мовою чи інтерпретованою?
Насправді Python є частково скомпільованою мовою та частково інтерпретованою мовою. Частина компіляції виконується спочатку, коли ми виконуємо наш код, і це генерує внутрішній байт-код. Цей байт-код перетворюється віртуальною машиною Python (p.v.m) відповідно до основної платформи (машина+операційна система).

4. Що означає символ «#» у Python?
«#» використовується для коментування всього, що йде після в рядку.

5. Яка різниця між змінним типом даних і незмінним типом даних?
 Змінні типи даних можна редагувати, тобто вони можуть змінюватися під час виконання. Наприклад, list, dictionary тощо.
 Незмінні типи даних не можна редагувати, тобто вони не можуть змінюватися під час виконання. Наприклад, string, tuple тощо.
6. Як аргументи передаються за значенням або за посиланням у Python?
Все в Python є об’єктами, і всі змінні містять посилання на об’єкти. Еталонні значення відповідають функціям; в результаті ви не можете змінити значення посилань. Однак ви можете змінити об’єкти, якщо вони змінні.


# Незмінний об'єкт (int)
x = 5
y = x  # y посилається на той самий об'єкт, що й x

print(f"x = {x}, y = {y}")
# x = 5, y = 5

# Спроба змінити значення y створить новий об'єкт
y = 10

print(f"x = {x}, y = {y}")
# x = 5, y = 10

# Змінний об'єкт (список)
list1 = [1, 2, 3]
list2 = list1  # list2 посилається на той самий об’єкт, що й list1

print(f"{list1=}, {list2=}")
# list1 = [1, 2, 3], list2 = [1, 2, 3]


list2.append(4)

print(f"{list1=}, {list2=}")
# list1 = [1, 2, 3, 4], list2 = [1, 2, 3, 4]
7. Яка різниця між set і dictionary?
 set - це невпорядкована колекція типів даних, яка повторюється, змінюється і не має повторюваних елементів.
 dictionary у Python — це невпорядкована колекція значень даних, яка використовується для зберігання значень даних, як карта.
8. Що таке List Comprehension? Наведіть приклад.
List Comprehension — це синтаксична конструкція, яка полегшує створення списку на основі існуючого ітерованого об’єкта.


my_list = [i for i in range(1, 10)]
9. Що таке labmda-функція?
labmda-функція є анонімною функцією. Ця функція може мати будь-яку кількість параметрів, але може мати лише один оператор.


a = lambda x, y : x*y
print(a(7, 19))
10. Що таке pass у Python?
pass означає невиконання жодної операції, іншими словами, це покажчик місця заповнення у складеному операторі, де має залишитися порожнє місце, і там нічого не потрібно писати.

11. Яка різниця між / і // в Python?
// представляє цілочисельне ділення, тоді як / представляє точне ділення.


5//2 = 2
5/2 = 2.5
12. Як виконується обробка винятків в Python?
Є 3 основні ключові слова, тобто try, except і finally, які використовуються для перехоплення винятків і відповідного керування механізмом відновлення. Try — це блок коду, який відстежується на наявність помилок. За винятком того, що блок виконується, коли виникає помилка.

Краса finally блоку полягає у виконанні коду після спроби знайти помилку. Цей блок виконується незалежно від того, сталася помилка чи ні. Блок Finally використовується для виконання необхідних дій з очищення об’єктів/змінних.


a = 10
b = 0
try:
    x = a / b
except ZeroDivisionError:
    print('Cannot devide by zero.')
    x = 0
finally:
    z = 5 + x
13. Що таке функція swapcase у Python?
Це функція рядка, яка перетворює всі символи верхнього регістру в нижній і навпаки. Він використовується для зміни існуючого регістру рядка. Цей метод створює копію рядка, який містить усі символи у регістрі swap.


string = "Hello Pune"
string.swapcase() # "hELLO pUNE"
14. Різниця між циклом for і while у Python
 Цикл for зазвичай використовується для перебору елементів в ітерованих об’єктах, таких як List, Tuple, Set і Dictionary. Розробники використовують цикл for, у якому вони мають початок і кінець умови.
 Цикл while — це фактична функція циклу, яка використовується в будь-якій іншій мові програмування. Програмісти використовують цикл Python while, де вони мають лише кінцеві умови.
15. Чи можемо ми передати функцію як аргумент у Python?
Так, до функції можна передати кілька аргументів, включаючи об’єкти, змінні (одного й іншого типів даних) і функції. Функції можна передавати як параметри іншим функціям, оскільки вони є об’єктами. Функції вищого порядку — це функції, які можуть приймати інші функції як аргументи.

16. Що таке *args і *kwargs?
Щоб передати змінну кількість аргументів до функції в Python, використовуйте спеціальний синтаксис *args і **kwargs у специфікації функції. Він використовується для передачі списку аргументів змінної довжини без ключових слів. Використовуючи *, змінна, яку ми пов’язуємо з *, стає ітерованою, дозволяючи вам виконувати над нею операції, такі як ітерація над нею та використання операцій вищого порядку, таких як карта та фільтр.

 *args - неіменованні параметри функції зазвичай list;
 **kwargs - іменовані параметри функції, зазвичай dict.
17. Чи потрібні відступи в Python?
Так, у Python потрібен відступ. Інтерпретатор Python може бути проінформований про те, що група операторів належить до певного блоку коду, використовуючи відступи Python. Відступи роблять код легким для читання розробниками на всіх мовах програмування, але в Python дуже важливо робити відступи в коді в певному порядку.

18. Що таке Scope в Python
Розташування, де ми можемо знайти змінну, а також отримати до неї доступ, якщо потрібно, називається областю (scope) змінної.

 Локальні змінні – це ті, які ініціалізуються у функції та є унікальними для цієї функції. До нього неможливо отримати доступ поза функцією.
 Глобальні змінні – це ті, які визначені та оголошені поза будь-якою функцією та не визначені жодною функцією.
 Module-level scope: стосується глобальних об’єктів поточного модуля, доступних у програмі.
 Outermost scope: відноситься до будь-яких вбудованих імен, які програма може викликати. Назва, на яку посилається, знаходиться останньою серед об’єктів у цій області.
19. Що таке docstring у Python?
 Рядки документації Python (або docstrings) забезпечують зручний спосіб асоціювання документації з модулями, функціями, класами та методами Python.
 Оголошення рядків документів: рядки документів оголошуються за допомогою '''потрійних одинарних лапок''' або """потрійних подвійних лапок""" безпосередньо під оголошенням класу, методу або функції. Усі функції повинні мати рядок документації.
 Доступ до рядків документів: отримати доступ до рядків документів можна за допомогою методу __doc__ об’єкта або за допомогою функції довідки.
20. Що таке динамічно типізована мова програмування?
Типізовані мови — це мови, в яких ми визначаємо тип типу даних, і він буде відомий машині під час компіляції або під час виконання. Типові мови можна класифікувати на дві категорії:

 Cтатично типізовані мови: у цьому типі мови тип даних змінної відомий під час компіляції, що означає, що програміст має вказати тип даних змінної під час її оголошення.
 Динамічно типізовані мови: це мови, які не вимагають жодного попередньо визначеного типу даних для будь-якої змінної, оскільки вони інтерпретуються під час виконання самою машиною. У цих мовах інтерпретатори призначають тип даних змінній під час виконання залежно від її значення.
21. Що таке break, continue та pass у Python?
Оператор break використовується для завершення циклу або оператора, в якому він присутній. Після цього керування перейде до операторів, які присутні після оператора break, якщо він доступний.

Continue також є оператором керування циклом, як і оператор break. Оператор continue протилежний оператору break, замість того, щоб завершувати цикл, він змушує виконати наступну ітерацію циклу.

Pass означає невиконання жодної операції, іншими словами, це покажчик місця заповнення у складеному операторі, де має залишитися порожнє місце, і там нічого не потрібно писати.

22. Що таке вбудовані типи даних у Python?
Нижче наведено стандартні або вбудовані типи даних у Python:

 Числовий: числовий тип даних у Python представляє дані, які мають числове значення. Числове значення може бути цілим числом, плаваючим числом, логічним або навіть комплексним числом.
Тип послідовності: Тип даних послідовності в Python — це впорядкована колекція подібних або різних типів даних. У Python існує кілька типів послідовностей:

String
List
Tuple
Dictionary
Range
 Mapping Types: у Python хешовані дані можна зіставляти з випадковими об’єктами за допомогою об’єкта зіставлення. Зараз існує лише один загальний тип відображення, словник, а об’єкти відображення є змінними.
 Set: у Python set (набір) — це невпорядкована колекція типів даних, яка ітерується, змінюється та не має повторюваних елементів. Порядок елементів у наборі не визначений, хоча він може складатися з різних елементів.
23. Як задати число floor в Python?
Математичний модуль Python (math) містить метод, який можна використовувати для обчислення мінімального числа. Метод floor() у Python повертає нижню частину x, тобто найбільше ціле число, яке не перевищує x. ceil(x) у Python повертає максимальне значення x, тобто найменше ціле число, більше або рівне x.

24. Яка різниця між функціями xrange і range?
range() і xrange() — дві функції, які можна використовувати для повторення певної кількості разів у циклах for у Python. У Python 3 немає xrange, але функція range поводиться як xrange у Python 2.

 range() – повертає список чисел, створених за допомогою функції range().
 xrange() – Ця функція повертає об’єкт генератора, який можна використовувати для відображення чисел лише за допомогою циклу. Єдиний певний діапазон відображається на вимогу і, отже, називається ледачим оцінюванням.
25. Що таке Dictionary Comprehension? Наведіть приклад
Dictionary Comprehension — це синтаксична конструкція, яка полегшує створення словника на основі існуючого ітерованого.


my_dict = {i:1+7 for i in range(1, 10)}
26. Чи існує Tuple Comprehension?
Tuple Comprehension неможливе в Python, оскільки воно завершується генератором, а не Tuple Comprehension.

27. Різниця між list i tuple?
Давайте розберемо відмінності між List і Tuple:

List	Tuple
List є змінними типами даних.	Tuple є незмінними типами даних.
Списки споживають більше пам'яті	Кортеж споживає менше пам'яті порівняно зі списком
Список краще підходить для виконання операцій, таких як вставка та видалення.	Для доступу до елементів підходить тип даних Tuple
Iтерації займають багато часу	Iтерації швидші
28. Яка різниця між поверхневою та глибокою копією?
Неглибока копія використовується, коли створюється новий тип екземпляра, і вона зберігає скопійовані значення, тоді як глибока копія зберігає вже скопійовані значення. Неглибока копія має швидше виконання програми, тоді як глибока копія сповільнює її.


import copy

# Original list with nested list
original_list = [1, 2, [3, 4], 5]

# Shallow copy
shallow_copy = copy.copy(original_list)

# Deep copy
deep_copy = copy.deepcopy(original_list)

# Modify the nested list in the shallow copy
shallow_copy[2][0] = 100

# Modify the nested list in the deep copy
deep_copy[2][1] = 200

print("Original list:", original_list) # Original list: [1, 2, [100, 4], 5]
print("Shallow copy:", shallow_copy) # Shallow copy: [1, 2, [100, 4], 5]
print("Deep copy:", deep_copy) # Deep copy:: [1, 2, [200, 4], 5]
29. Яка техніка сортування використовується функціями sort() і sorted() python?
Python використовує для сортування алгоритм Tim Sort. Це стабільне сортування, найгірший випадок якого дорівнює O(N log N). Це гібридний алгоритм сортування, похідний від сортування злиттям і сортування вставкою, призначений для ефективної роботи з багатьма типами даних реального світу.

30. Що таке декоратори?
Простими словами, декоратори — це конкретні зміни, які ми вносимо в синтаксис Python, щоб легко змінювати функції.


# Decorator function
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper


# Function to be decorated
@my_decorator
    def say_hello():
    print("Hello!")

# Using the decorated function
say_hello()
31. Як debug програму Python?
У Python ми можемо використовувати налагоджувач pdb для налагодження коду. Щоб розпочати налагодження, ми маємо ввести наступні рядки у верхній частині сценарію Python.


import pdb
pdb.set_trace()
Після додавання цих рядків наш код запускається в режимі налагодження. Тепер ми можемо використовувати такі команди, як breakpoint, step through, step into тощо для налагодження.

За допомогою цієї команди ми можемо налагодити програму Python:


python -m pdb python-script.py
32. Що таке ітератори в Python?
У Python ітератори використовуються для повторення групи елементів, контейнерів, таких як список. Ітератори — це колекції елементів, і вони можуть бути списком, кортежами або словником. Ітератор Python реалізує __itr__ і метод next() для повторення збережених елементів. Зазвичай ми використовуємо цикли для перебору колекцій (списків, кортежів) у Python.


class MyIterator:
    def __init__(self, data):
        self.index = 0
        self.data = data

    def __iter__(self):
        return self

    def __next__(self):
        if self.index >= len(self.data):
            raise StopIteration
        result = self.data[self.index]
        self.index += 1
        return result


# Example usage
my_list = [1, 2, 3, 4, 5]
my_iterator = MyIterator(my_list)
for item in my_iterator:
    print(item)
33. Що таке генератори в Python?
У Python генератор — це спосіб, який визначає, як реалізувати ітератори. Це звичайна функція, за винятком того, що вона дає вираз у функції. Він не реалізує __itr__ і метод next() і також зменшує інші накладні витрати.

Якщо функція містить принаймні оператор yield, вона стає генератором. Ключове слово yield призупиняє поточне виконання, зберігаючи його стани, а потім поновлює з того самого, коли вимагається.


def my_generator(quantity: int):
    for i in range(quantity):
        yield i


# Example usage
gen = my_generator(quantity=5)
for value in gen:
    print(value)
34. Чи підтримує Python множинне успадкування?
Python підтримує багаторазове успадкування, на відміну від Java. Множинне успадкування означає, що клас може бути отримано від кількох батьківських класів.

Множинне успадкування - це можливість у класу нащадка успадковувати функціонал не від одного, а кількох батьків. Завдяки цьому ми можемо створювати складні структури, зберігаючи простий і підтримуваний код.

Наприклад, у нас є клас автомобіля:


class Auto:
    def ride(self):
        print("Riding on a ground")
Також у нас є клас для човна:


class Boat:
    def swim(self):
        print("Sailing in the ocean")
Тепер, якщо нам потрібно запрограмувати автомобіль-амфібію, який плаватиме у воді та їздитиме землею, ми замість написання нового класу, можемо просто успадкувати від уже існуючих:


class Amphibian(Auto, Boat):
    pass

a = Amphibian()
a.ride()
a.swim()
Тепер ми можемо створити інстанс класу Amphibian, який вмітиме і плаватиме і їздитиме.

35. Що таке поліморфізм та інкапсуляція в Python?
Поліморфізм означає здатність приймати різні форми. Так, наприклад, якщо батьківський клас має метод з іменем ABC, тоді дочірній клас також може мати метод з такою ж назвою ABC, який має власні параметри та змінні. Python допускає поліморфізм.


class Animal:
    def speak(self):
        raise NotImplementedError("Subclass must implement abstract method")

class Dog(Animal):
    def speak(self):
        return "Woof!"

class Cat(Animal):
    def speak(self):
        return "Meow!"-

class Cow(Animal):
    def speak(self):
        return "Moo!"


# Example usage
animals = [Dog(), Cat(), Cow()]
for animal in animals:
    print(animal.speak())
Інкапсуляція означає зв'язування коду та даних разом. Клас Python є прикладом інкапсуляції.


class Person:
    def __init__(self, name, age):
        self.__name = name
        self.__age = age

    def get_name(self):
        return self.__name

    def set_name(self, name):
        self.__name = name

    def get_age(self):
        return self.__age

    def set_age(self, age):
        if age < 0:
            raise ValueError("Age must be a positive integer")
        self.__age = age

# Example usage
person = Person("Alice", 30)
print(person.get_name())  # Output: Alice
print(person.get_age())   # Output: 30
person.set_age(31)
print(person.get_age())   # Output: 31
person.set_age(-1)  # Raises ValueError: Age must be a positive integer
36. Що таке garbage collection в Python?
Garbage collection в Python автоматично керує пам’яттю та виділеням heap. Простіше кажучи, процес автоматичного видалення непотрібних або невикористаних об’єктів для звільнення пам’яті в Python називається garbage collection.

37. Як ви виконуєте абстракцію даних у Python?
Абстракція даних надає лише необхідні деталі та приховує реалізацію від світу. Цього можна досягти в Python за допомогою інтерфейсів і абстрактних класів.


from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius**2

    def perimeter(self):
        return 2 * 3.14 * self.radius
38. Як здійснюється керування пам’яттю в Python?
Python використовує свою приватну купу для керування пам’яттю. По суті, усі об’єкти та структури даних зберігаються у приватній купі. Навіть програміст не може отримати доступ до цього приватного простору, оскільки інтерпретатор піклується про цей простір. Python також має вбудований garbage collection (збирач сміття), який переробляє всю невикористану пам’ять, звільняє пам’ять і робить її доступною для купи простір.

39. Як видалити файл за допомогою Python?
Ми можемо видалити файл за допомогою Python такими підходами:


os.remove()
os.unlink()

import os

# Specify the file path
file_path = "example.txt"

# Check if the file exists before removing
if os.path.exists(file_path):
    # Remove the file
    os.remove(file_path)
    print(f"File '{file_path}' removed successfully.")
else:
    print(f"File '{file_path}' does not exist.")

40. Що таке slicing в Python?
Python slicing — це операція над рядком для вилучення частини рядка або частини списку. За допомогою цього оператора можна вказати, де почати нарізку, де закінчити, і вказати крок. Нарізка списку повертає новий список із наявного списку.


Lst[ Initial : End : IndexJump ]
41. Що таке namespace у Python?
Простір імен — це система імен, яка використовується для забезпечення унікальності імен, щоб уникнути конфліктів імен.

42. Що таке PIP?
PIP — це абревіатура від Python Installer Package, яка забезпечує безпроблемний інтерфейс для встановлення різних модулів Python. Це інструмент командного рядка, який може шукати пакети в Інтернеті та встановлювати їх без будь-якої взаємодії з користувачем.

43. Що таке функція zip?
Функція zip:

 як аргументи функції передаються послідовності
 zip повертає ітератор з кортежами, в якому n-ий кортеж складається з n-их елементів послідовностей, які були передані як аргументи
 якщо як аргументи були передані послідовності різної довжини, то всі вони будуть скорочені до довжини найкоротшої послідовності

list1 = [1, 2, 3, 4, 5]
list2 = [10, 20, 30, 40, 50]
list3 = [100, 200, 300]

result = list(zip(list1, list2, list3))
print(result)   # [(1, 10, 100), (2, 20, 200), (3, 30, 300)]
44. Що таке Pickling та Unpickling?
Модуль Pickle приймає будь-який об’єкт Python, перетворює його на рядкове представлення та створює дамп у файл за допомогою функції dump. Цей процес називається pickling.

У той час як процес отримання оригінальних об’єктів Python із збереженого рядкового представлення називається unpickling. У Python є модуль під назвою pickle. У цьому модулі реалізований потужний алгоритм для серіалізації та десеріалізації об’єктної структури Python.


import pickle

# Example dictionary
data = {
    'name': 'Alice',
    'age': 30,
    'is_student': False
}

# Pickle the data
with open('data.pkl', 'wb') as f:
    pickle.dump(data, f)

# Unpickle the data
with open('data.pkl', 'rb') as f:
    loaded_data = pickle.load(f)

print(loaded_data)
45. Як ми можемо виконувати функціональне програмування на Python?
У функціональному програмуванні ми розкладаємо програму на функції. Ці функції приймають вхідні дані та після обробки видають вихідні дані. Функція не підтримує жодного стану. Python надає вбудовані функції, які можна використовувати для функціонального програмування.

Деякі з цих функцій:

Map()
reduce()
filter()

# Define a list of numbers
numbers = [1, 2, 3, 4, 5]


# Define a function to square a number
def square(x):
    return x * x


# Use map() to apply the square function to each number in the list
squared_numbers = map(square, numbers)

# Convert the map object to a list
squared_numbers_list = list(squared_numbers)

print(squared_numbers_list) # [1, 4, 9, 16, 25]

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def is_even(x):
    return x % 2 == 0


even_numbers = filter(is_even, numbers)

even_numbers_list = list(even_numbers)

print(even_numbers_list) # [2, 4, 6, 8, 10]

from functools import reduce


numbers = [1, 2, 3, 4, 5]


def add(x, y):
    return x + y


sum = reduce(add, numbers)

print(sum) # 15
Ітератори та генератори подій можна використовувати для функціонального програмування на Python.

46. Що таке __init__() у Python?
Еквівалент конструкторів у термінології ООП, __init__ є зарезервованим методом у класах Python. Метод __init__ викликається автоматично кожного разу, коли ініціюється новий об’єкт. Цей метод виділяє пам’ять новому об’єкту відразу після його створення. Цей метод також можна використовувати для ініціалізації змінних.

47. Написати код для відображення поточного часу?

import time

current_time = time.localtime()
print(f"Current time is {current_time}")
48. Що таке специфікатори доступу в Python?
Python використовує символ _, щоб визначити контроль доступу для певного члена даних або функції-члена класу. Клас у Python має три типи модифікаторів доступу Python:

 Модифікатор публічного доступу: члени класу, які оголошені публічними, легко доступні з будь-якої частини програми. Усі члени даних і функції-члени класу є відкритими за замовчуванням.
 Модифікатор захищеного доступу: доступ відкритий лише всередині того ж пакета. Для позначення використовуэться _
 Модифікатор приватного доступу: члени класу, які оголошені приватними, доступні лише в межах класу, модифікатор приватного доступу є найбезпечнішим модифікатором доступу. Члени даних класу оголошуються приватними шляхом додавання символу подвійного підкреслення __ перед членом даних цього класу.
49. Що таке unit tests(модульні тести) в Python?
Модильні тести (unit tests) в Python (або будь-якій мові програмування) використовуються для перевірки того, що малі ізольовані частини програми (модулі) працюють належним чином. Ці тести зазвичай зосереджені на окремих функціях, методах або класах, гарантуючи, що кожна одиниця коду поводиться правильно в різних умовах. Модильні тести допомагають розробникам виявляти та виправляти помилки на ранніх етапах процесу розробки, полегшуючи підтримку та розширення кодової бази з часом.

У Python модульні тести часто пишуться за допомогою фреймворку unittest, який надає набір інструментів для створення та виконання тестів. Тести організовані в тестові випадки, які є класами, успадкованими від unittest.TestCase. У тестовому прикладі визначаються окремі методи тестування, кожен з яких зазвичай стверджує, що певна частина коду поводиться, як очікувалося.

Наприклад, простий модульний тест на Python може виглядати так:


import unittest

def add(x, y):
    return x + y

class TestAddFunction(unittest.TestCase):

    def test_add(self):
        self.assertEqual(add(1, 2), 3)
        self.assertEqual(add(-1, 1), 0)
        self.assertEqual(add(0, 0), 0)

if __name__ == '__main__':
    unittest.main()
50. Python Global Interpreter Lock (GIL)?
Python Global Interpreter Lock (GIL) — це тип блокування процесу, який використовується Python щоразу, коли він має справу з процесами. Як правило, Python використовує лише один потік для виконання набору письмових операторів. Продуктивність однопотокового процесу та багатопотокового процесу буде однаковою в Python, і це через GIL у Python. Ми не можемо досягти багатопоточності в Python, оскільки у нас є глобальне блокування інтерпретатора, яке обмежує потоки та працює як один потік.

51. Що таке анотації функцій у Python?
Анотація функції — це можливість, яка дозволяє додавати метадані до параметрів функції та повертати значення. Таким чином ви можете вказати тип введення параметрів функції та тип повернення значення, яке повертає функція.

Анотації функцій — це довільні вирази Python, пов’язані з різними частинами функцій. Ці вирази оцінюються під час компіляції та не живуть у середовищі виконання Python. Python не надає жодного значення цим анотаціям. Вони видаляються, коли інтерпретуються сторонніми бібліотеками, наприклад, mypy.


def greet(name: str, age: int) -> str:
    return f"Hello, {name}! You are {age} years old."

print(greet("Alice", 30))

print(greet.__annotations__)
# Output: {'name': <class 'str'>, 'age': <class 'int'>, 'return': <class 'str'>}
52. Що таке групи винятків у Python?
ExceptionGroup можна обробляти за допомогою нового синтаксису, except*. Символ * вказує на те, що кожне речення, except*, може обробляти кілька винятків.

ExceptionGroup — це колекція/група різних типів винятків. Не створюючи кількох винятків, ми можемо групувати разом різні винятки, які ми можемо згодом отримувати один за одним, коли це буде необхідно. Порядок, у якому винятки зберігаються в групі винятків, не має значення під час їх виклику.


try:
    raise ExceptionGroup(
        'Example ExceptionGroup', (
            TypeError('Example TypeError'),
            ValueError('Example ValueError'),
            KeyError('Example KeyError'),
            AttributeError('Example AttributeError')
        )
    )
    except* TypeError:
    ...
    except* ValueError as e:
    ...
    except* (KeyError, AttributeError) as e:
    ...
53. Що таке інструкція Python Switch?
Python реалізував функцію перемикання регістрів під назвою відповідність структурного шаблону (structural pattern matching). Ви можете реалізувати цю функцію за допомогою ключових слів match і case. Зауважте, що символ підкреслення — це те, що ви використовуєте для визначення регістру за замовчуванням для оператора switch у Python.

! Примітка
До Python 3.10 Python не підтримував оператори match case.


match expression:
    case pattern1:
        # code block for pattern1
    case pattern2 if condition:
        # code block for pattern2 with condition
    case pattern3, pattern4:
        # code block for pattern3 or pattern4
    case _:
        # default case
54. У чому полягає вдосконалення функції enumerate() Python?
У Python функція enumerate() є кращою в порівнянні зі звичайною ітерацією. Функція enumerate() повертає ітератор, який дає (0, item[0]).


fruits = ['apple', 'banana', 'cherry']

for index, fruit in enumerate(fruits):
    print(f"Index {index}: {fruit}")

fruits = ['apple', 'banana', 'cherry']

for index, fruit in enumerate(fruits, start=1):
    print(f"Index {index}: {fruit}")
55. Використання та переваги pythonвикористання та переваги python
 Легко читати код
 знижує вартість обслуговування програми
 open source
 підтримка модульності сторонніх пакетів
 Легкий code reverse.
56. Динамічно типізована мова?
Введення тексту стосується перевірки типу в мові програмування, яка зберігає мову типу, таку як Python "1" + 2, призведе до помилки типу, оскільки ця мова не допускає «приведення типу» (неявне перетворення типів даних), з іншого боку, тип даних слабко типізована мова, така як JS, просто виведе "12" у результат. Два етапи перевірки введення:

 Статичні типи даних перевіряються перед виконанням.
 Динамічний тип даних перевіряється під час виконання
57. Що таке self у коді?
self представляє екземпляри класу. Ці зручні ключові слова дозволяють отримати доступ до змінних, атрибутів і методів визначеного класу в Python. Параметр self не обов’язково повинен називатися «self», оскільки ви можете називати його будь-яким іншим іменем, проте параметр self завжди має бути першим параметром будь-якої функції класу, незалежно від вибраного імені, тому замість self ви називаєте mine, our або щось інше


class Address:
    def __init__(mine, street, number):
        mine.street = street
        mine.number = number

    def myfunc(abc):
        print("my address is ", abc.street)
p1 = Address("Albert street", 20)
p1.myfunc()
58. Що таке comprehension в Python?
Він надає нам короткий і стислий спосіб побудови нових послідовностей, використовуючи послідовності, які вже були визначені. Python підтримує чотири типи comprehension:

list comprehension
dictionary comprehension
set comprehension
generator comprehension
59. Що таке декоратор?
Декоратор — це патерн проектування в Python, який дозволяє користувачеві додавати нову функціональність до існуючого об’єкта, не змінюючи його структуру. Декоратори зазвичай викликаються перед визначенням функції, яку ви хочете декорувати.


# Decorator function
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper


# Function to be decorated
@my_decorator
    def say_hello():
    print("Hello!")

# Using the decorated function
say_hello()
60. Що таке модулі Python?
Файли, що містять коди Python, називаються модулями Python. Цей код може бути будь-яким класів, функцій або змінних і економить час програміста, надаючи попередньо визначені функції, коли це необхідно. Це файл із розширенням .py, який містить виконуваний код.

Нижче наведено типові вбудовані модулі:

os
sys
math
random
json
61. Що таке pep 8?
PEP 8 у Python розшифровується як Python Enhancement Proposal. Це набір правил, які визначають, як писати та проектувати код Python для максимальної читабельності.

62. Що таке пакети Python?
Пакет Python відноситься до колекції різних підпакетів і модулів на основі схожості функцій.

63. Які популярні бібліотеки Python використовуються в аналізі даних?
Ось деякі з популярних бібліотек Python, які використовуються для аналізу даних:

 Pandas: потужний інструментарій аналізу даних Python
 SciKit: це бібліотека машинного навчання на Python.
 Seaborn: це бібліотека візуалізації статистичних даних на Python.
 SciPy: це система з відкритим кодом для науки, математики та інженерії, реалізована на Python.
64. Яка різниця між методами append() і extend()?
Методи append() і extend() є методами, які використовуються для додавання елементів у кінець списку.

append(element): додає заданий елемент у кінець списку, який викликав цей метод append()

extend(another-list): додає елементи іншого списку в кінець списку, який викликав цей метод extend()

65. Що таке docstring у Python?
Python дозволяє користувачам додавати опис (або короткі примітки) для своїх методів за допомогою рядків документації або docstrings. Рядки документів відрізняються від звичайних коментарів у Python, оскільки замість того, щоб повністю ігноруватися інтерпретатором Python, як у випадку коментарів, вони визначаються в потрійних лапках.

66. Як досягається багатопотоковість у Python?
Python має багатопотоковий пакет threading, але його використання зазвичай не вважається хорошою практикою, оскільки це призведе до збільшення часу виконання коду. У Python є конструктор під назвою Global Interpreter Lock (GIL). GIL гарантує, що лише один із ваших "потоків" може виконуватися одночасно. Процес гарантує, що потік отримує GIL, виконує невелику роботу, а потім передає GIL у наступний потік. Це відбувається дуже швидко, і тому людському оку здається, що ваші потоки виконуються паралельно, але насправді вони виконуються один за одним, просто беручи те саме ядро ЦП.

67. Які стандартні типи даних вбудовані в Python?
Python підтримує згадані нижче вбудовані типи даних:

 Immutable data types: Number, String, Tuple
 Mutable data types: List, Dictionary, Set
68. Яка різниця між split() і slicing в Python?
Функція split() і slicing працюють над об’єктом String. Використовуючи функцію split(), ми можемо отримати список слів із рядка.

наприклад 'a b c'.split() повертає ['a', 'b', 'c']

Slicing — це спосіб отримання підрядка з рядка. Він повертає інший рядок.

наприклад >>> 'a b c'[2:3] повертає 'b'

69. Як ви можете рандомізувати елементи списку на місці в Python?
Цього можна легко досягти за допомогою функції shuffle() із бібліотеки random, як показано нижче:


from random import shuffle

array = [1, 2, 3, 4, 5, 6, 7, 8, 9]

shuffle(array)

print(array)
70. Що таке негативні індекси і для чого вони використовуються?
Щоб отримати доступ до елемента з упорядкованих послідовностей, ми просто використовуємо індекс елемента, який є номером позиції цього конкретного елемента. Індекс зазвичай починається з 0, тобто перший елемент має індекс 0, другий – 1 і так далі.

Індексація Python

Коли ми використовуємо індекс для доступу до елементів із кінця списку, це називається зворотним індексуванням. При зворотному індексуванні індексація елементів починається з останнього елемента з номером індексу «-1». Передостанній елемент має індекс «-2» і так далі. Ці індекси, які використовуються при зворотній індексації, називаються негативними індексами.

71. Поясніть методи split(), sub(), subn() модуля «re» в Python?
Ці методи належать до модуля Python RegEx або re і використовуються для зміни рядків.

split(pattern, string, maxsplit=0, flags=0): цей метод розбиває рядок на список, використовуючи шаблон регулярного виразу як розділювач. Він повертає список підрядків. Параметр maxsplit контролює кількість поділів, які потрібно виконати (за замовчуванням 0, що означає всі можливі поділи).


import re
text = "Hello, World!"
result = re.split(r"\W+", text)
print(result)
# Output: ['Hello', 'World', '']
sub(pattern, repl, string, count=0, flags=0): цей метод замінює входження шаблону в рядок на рядок заміни. Він повертає новий рядок із замінами. Параметр count обмежує кількість замін (за замовчуванням 0, що означає всі випадки).


import re
text = "Hello, World!"
result = re.sub(r"\W+", "-", text)
print(result)
# Output: 'Hello-World-'
subn(pattern, repl, string, count=0, flags=0): цей метод подібний до sub(), але він також повертає кількість замін, зроблених у вигляді кортежу (new_string, num_replacements).


import re
text = "Hello, World!"
result, num_replacements = re.re.subn(r"\W+", "-", text)
print(result)
# Output: 'Hello-World-'
print(num_replacements)
# Output: 2
72. Що таке композиція в Python?
У Python композиція — це техніка проектування, коли клас складається з інших класів або об’єктів як своїх членів. Це на відміну від успадкування, коли клас продовжує інший клас. Композиція дозволяє створювати більш складні об’єкти шляхом комбінування простіших, сприяючи повторному використанню коду та гнучкості.

Ось простий приклад для ілюстрації композиції:


class Engine:
    def start(self):
        print("Engine started")

    def stop(self):
        print("Engine stopped")

class Car:
    def __init__(self):
        self.engine = Engine()  # Composition: Car has an Engine

    def start(self):
        print("Car starting...")
        self.engine.start()

    def stop(self):
        print("Car stopping...")
        self.engine.stop()

my_car = Car()
my_car.start()
my_car.stop()
73. Яка різниця між Git rebase та Git merge?
git rebase та git merge — це два способи інтегрувати зміни з однієї гілки в іншу в Git, але вони роблять це різними способами:

git merge:

 Створює новий комміт у поточній гілці, який поєднує зміни з об’єднаної гілки.
 Зберігає історію комітів обох гілок, включаючи структуру гілок.
 Створює «об’єднаний комміт», який має два батьківські коміти, по одному з кожної об’єднаної гілки.
 Зазвичай використовується для об’єднання гілок функції в основну гілку (наприклад, об’єднання гілки функції в основну).

git checkout main
git  merge feature-branch
git rebase:

 Бере всі зміни в поточній гілці та відтворює їх поверх іншої гілки.
 Переписує історію комітів поточної гілки, створюючи нові коміти для кожного коміту в перебазованій гілці.
 Результатом є лінійна історія комітів без комітів злиття.
 Можна використовувати для інтеграції змін із гілки функції в основну гілку, роблячи історію головної гілки чистішою та більш лінійною.

git checkout feature-branch
git rebase main
Таким чином, git merge зберігає історію комітів обох гілок і створює коміт злиття, тоді як git rebase переписує історію комітів поточної гілки та відтворює зміни поверх іншої гілки, що призводить до лінійної історії. Вибір між git merge і git rebase залежить від бажаного результату для історії комітів.

74. Що таке патерни програмування?
Паттерн програмування — це вирішення певної проблеми, що часто зустрічається при проектуванні архітектури програм.

Паттерн є не якимось конкретним кодом, а загальною концепцією вирішення тієї чи іншої проблеми, яку потрібно буде ще підлаштувати під потреби вашої програми.

Паттерни часто плутають із алгоритмами, адже обидва поняття описують типові рішення якихось відомих проблем. Але якщо алгоритм – це точний набір дій, то патерн – це високорівневий опис рішення, реалізація якого може відрізнятись у двох різних програмах.

Основні групи патернів:

 Породжуючі паттерни, турбуються про гнучке створення об'єктів без внесення в програму зайвих залежностей.
Object pool (пул об'єктів)
Factory (фабрика)
Prototype (прототип)
Lazy initialization (відкладена ініціалізація)
Dependency injection (використання залежності)
 Структурні патерни показують різні способи побудови зв'язків між об'єктами.
Adapter или wrapper (адаптер, обгортка)
Bridge (міст)
Composite (композитний)
Decorator (декоратор, оформлювач)
Front controller (єдина точка входу)
Flyweight (пристосуванець)
 Поведінкові патерни піклуються про ефективну комунікацію між об'єктами.
Chain of responsibility (ланцюжок обов'язків)
Command или action (команда, дія)
Interpreter (інтерпретатор)
Iterator (ітератор, вказівник)
75. Що таке Big O notation
Big O notation використовується в інформатиці для опису продуктивності або складності алгоритму з точки зору розміру вхідних даних. Він надає спосіб аналізу ефективності алгоритмів, описуючи, як зростають вимоги до часу виконання або простору зі збільшенням розміру вхідних даних.

У Big O notation ми зосереджуємося на найгіршому сценарії, тому нас цікавить верхня межа продуктивності алгоритму.

Ось приклад у Python для демонстрації нотації Big O:


def linear_search(arr, target):
    """
    Perform a linear search to find the target element in the array.
    Returns the index of the target element if found, or -1 if not found.
    """
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

# Example usage
arr = [1, 2, 3, 4, 5]
target = 3
print(linear_search(arr, target))  # Output: 2
76. Що таке мета-клас у Python? Що таке мета-клас у Python?
У Python метаклас — це клас, який визначає, як створюються інші класи. Ви можете думати про метаклас як про «клас класу». Коли ви визначаєте клас у Python, для створення цього класу за замовчуванням використовується метаклас type. Однак ви можете визначити свій власний метаклас, щоб налаштувати поведінку створення класу.

Ось базовий приклад для демонстрації концепції метакласу:


# Define a metaclass
class MyMeta(type):
    def __new__(cls, name, bases, dct):
        # Add an attribute to the class being created
        dct['extra_attr'] = 'extra_value'
        return super().__new__(cls, name, bases, dct)


# Use the metaclass to create a class
class MyClass(metaclass=MyMeta):
    pass

# Access the added attribute
print(MyClass.extra_attr)  # Output: 'extra_value'
77. Що таке вимоги ACID?
Вимоги ACID — набір вимог, які забезпечують збереження даних. Що особливо важливе для фінансових операцій. Ми ж не хочемо залишитися без грошей через розрив з'єднання чи помилки в ПЗ, чи не так?

Давайте пройдемося по кожній літері ACID і подивимося на прикладах, чим архів кращий за 10 різних файлів. І чим транзакція краща за 10 окремих запитів.

Atomicity - Атомарність
Consistency - Узгодженість
Isolation - Ізольованість
Durability - Надійність
Atomicity - Атомарність

Атомарність гарантує, що кожну транзакцію буде виконано повністю або не буде виконано зовсім. Не допускаються проміжні стани.

Друг пізнається у біді, а база даних – у роботі з помилками. О, якби все завжди було добре і без помилок! Тоді ніякі ACID були б не потрібні. Але щойно виникає помилка, атомарність стає дуже важливою.

Consistency - Узгодженість

Транзакція, що досягає свого нормального завершення (EOT - end of transaction, завершення транзакції) і тим самим фіксує свої результати, зберігає узгодженість бази даних. Іншими словами, кожна успішна транзакція за визначенням фіксує лише допустимі результати.

Ця властивість випливає із попереднього. Завдяки тому, що транзакція не допускає проміжних результатів, база залишається консистентною. Є таке визначення транзакції: «Упорядковане безліч операцій, які переводять базу даних із одного узгодженого стану до іншого». Тобто до виконання операції і після цього база залишається консистентною (у перекладі українською — узгодженою).

Isolation - Ізольованість

Під час виконання транзакції паралельні транзакції не повинні впливати на результат.

Якщо у нас система суворо для однієї людини, то проблем не буде. А якщо користувачів кілька? Тоді транзакції запускають у паралель для прискорення роботи системи. А інакше уявіть собі, що ви робите замовлення в інтернет-магазині і система вам каже: "Ви в черзі, перед вами ще 100 людей хочуть замовлення оформити, зачекайте". Маячня ж? Маячня!

Як боротися із цими проблемами? Потрібно ізолювати транзакцію. Способів є кілька, але основні блокування та версії.

Блокування це коли ми блокуємо дані в базі. Можна заблокувати один рядок у таблиці, а можна всю таблицю. Можна заблокувати дані на редагування, а можна читати також.

Версії — це коли всередині бази кожного оновлення створюється нова версія даних і зберігається стара. Версіонування приховано від розробника, тобто ми не бачимо в базі жодних номерів версій та даних щодо них. Просто поки що транзакція, що оновлює запис, не покомітить свою зміну, решта споживачів читає стару версію запису і не блокується.

Durability - Надійність

Якщо користувач отримав підтвердження від системи, що транзакція виконана, він може бути впевнений, що зроблені ним зміни не будуть скасовані через будь-який збій. Знеструмилася система, стався збій в обладнанні? На виконану транзакцію це не вплине.

78. Що таке queues в Python?
У Python queues(черги) — це тип структури даних, який дотримується принципу «першим увійшов, першим вийшов» (FIFO), тобто перший елемент, доданий до черги, першим видаляється. Черги зазвичай використовуються для таких завдань, як керування запитами на веб-сервері або реалізація пошуку в ширину в алгоритмах обходу графів.

Python надає клас Queue у модулі queue (у Python 3)


from queue import Queue

# Create a queue
q = Queue()

# Add elements to the queue
q.put("apple")
q.put("banana")
q.put("cherry")

# Remove and return elements from the queue
print(q.get())  # Output: apple
print(q.get())  # Output: banana

# Check the size of the queue
print(q.qsize())  # Output: 1

# Check if the queue is empty
print(q.empty())  # Output: False
У цьому прикладі ми створюємо чергу за допомогою класу Queue і додаємо до неї три елементи. Потім ми видаляємо та друкуємо перші два елементи з черги за допомогою методу get(). Ми також використовуємо метод qsize(), щоб перевірити розмір черги, і метод empty(), щоб перевірити, чи черга порожня.

79. Що таке хеш таблиці в Python?
У Python hash table(хеш-таблиця) — це структура даних, яка реалізує асоціативний масив (також відомий як map, dictionary, або hash map) для зберігання пар ключ-значення. Він використовує хеш-функцію для обчислення індексу в масиві сегментів або слотів, зa яких можна знайти потрібне значення. Хеш-таблиці в середньому пропонують швидкий пошук, вставку та видалення, що робить їх широко використовуваною структурою даних для реалізації словників і наборів.

Вбудований словник Python dict є реалізацією хеш-таблиці. Він використовує хеш-функцію для обчислення індексу для кожного ключа та зберігає пари ключ-значення в масиві сегментів. Словники Python дуже оптимізовані та пропонують O(1) середню складність регістру для пошуку, вставки та видалення.

80. Яка різниця між параметрами функції та оператором функції в Python?
У Python параметр функції — це змінна, яка вказана в дужках у визначенні функції. Це заповнювач для значення, яке буде передано функції під час її виклику. Наприклад:


def greet(name):
    print(f"Hello, {name}!")

greet("Alice")
У цьому прикладі name є параметром функції greet.

З іншого боку, оператор функції стосується всього блоку коду, який визначає функцію, включаючи назву функції, параметри та код усередині функції. Отже, у наведеному вище прикладі весь блок def greet(name): ... є оператором функції.

81. Принципи SOLID
Ось як розшифровується акронім SOLID:

S: Single Responsibility Principle (Принцип єдиної відповідальності).

Кожен клас має вирішувати лише одне завдання.

O: Open-Closed Principle (Принцип відкритості-закритості).

Програмні сутності (класи, модулі, функції) мають бути відкриті розширення, але з модифікації.

L: Liskov Substitution Principle (Принцип підстановки Барбари Лисков).

Необхідно, щоб підкласи могли бути заміною для своїх суперкласів.

I: Interface Segregation Principle (Принцип розподілу інтерфейсу).

Створюйте вузькоспеціалізовані інтерфейси, призначені для конкретного клієнта. Клієнти не повинні залежати від інтерфейсів, які вони не використовують.

D: Dependency Inversion Principle (Принцип інверсії залежностей).

Об'єктом залежності має бути абстракція, а не щось конкретне.

 Модулі верхніх рівнів не повинні залежати від нижніх модулів. Обидва типи модулів мають залежати від абстракцій.
 Абстракції не повинні залежати від деталей. Деталі мають залежати від абстракцій.
82. Різниця між list та array
У Python є два типи колекцій: списки (list) та масиви (array). Обидва типи містять набори елементів, але мають деякі суттєві відмінності. Одна з головних відмінностей полягає в тому, що масиви можуть містити елементи лише одного типу даних, тоді як списки можуть зберігатися елементи різних типів.

Також масиви мають більш компактне уявлення в пам'яті і мають більш швидкі алгоритми пошуку і сортування. Однак, списки Python є більш універсальними і можуть бути використані для різних завдань.

Для створення списку Python використовується наступний синтаксис:


my_list = [1, 2, "три", 4.0]
Для створення масиву Python необхідно імпортувати модуль array:


import array
my_array = array.array('i', [1, 2, 3, 4])
Також для списків та масивів доступні різні методи, що дозволяють змінювати, додавати або видаляти елементи:


my_list.append("four") # додає елемент до кінця списку
my_array.pop() # видаляє останній елемент з масиву
83. Що таке global у Python?
Ключове слово global у Python використовується для оголошення змінної як глобальної, що означає, що вона доступна в усіх функціях та методах програми. Це дозволяє змінювати значення глобальної змінної зсередини функції.


x = 5

def change_x():
    global x
    x = 20  # modifies the global x

change_x()
print(x)  # prints 20
Без global Python припустив би, що x є новою локальною змінною:


x = 5

def change_x():
    x = 20  # creates a new local variable x

change_x()
print(x)  # prints 5
84. Що таке nonlocal?
Ключове слово nonlocal використовується всередині вкладених функцій для посилання на змінні в найближчій охоплюючій (неглобальній) області.


def outer_function():
    counter = 0

    def inner_function():
        nonlocal count  # refers to 'count' in outer()
        count += 1
        print("Inner count:", count)

    inner()
    inner()
    print("Outer count:", count)

outer()
Результат:


Inner count: 1
Inner count: 2
Outer count: 2
85. Яка різниця між __getattr__ і __getattribute__?
__getattr__ - це метод, який викликається, коли атрибут не знайдено в об'єкті. Він дозволяє визначити поведінку для відсутніх атрибутів.

__getattribute__ - це метод, який викликається для всіх атрибутів об'єкта, незалежно від того, чи існують вони чи ні. Він дозволяє перехоплювати доступ до всіх атрибутів об'єкта.

Властивість	__getattribute__	__getattr__
Коли викликається?	Завжди, за будь-якою ознакою	Тільки якщо атрибут не знайдено
Випадок використання	Спеціальний доступ для всіх атрибутів	Запасний варіант для відсутніх атрибутів
Продуктивність	Трохи повільніше (завжди спрацьовує)	Only runs when needed

class MyClass:
    def __getattribute__(self, name):
        print("Accessing attribute: ", name)
        return object.__getattribute__(self, name)

    def __getattr__(self, name):
        print("Attribute not found: ", name)
        return None
    def __init__(self):
        self.x = 5
obj = MyClass()
print(obj.x)
# Accessing attribute: x not found
# 5
print(obj.y)  # Attribute not found: y
# y not found
86. Що таке __slots__ класу Python?
У Python __slots__ — це механізм для обмеження атрибутів, які можуть мати екземпляри класу, та зменшення використання пам'яті шляхом уникнення створення __dict__ для кожного екземпляра.

За замовчуванням кожен об'єкт Python має атрибут __dict__, який зберігає атрибути екземпляра. Це гнучко, але неефективно з точки зору пам'яті.

Використання __slots__:

 Запобігає створенню динамічних атрибутів.
 Зберігає пам'ять (особливо корисно при великій кількості екземплярів).
 Потенційно пришвидшує доступ до атрибутів.

class Person:
    __slots__ = ['name', 'age']  # Only allow these attributes

    def __init__(self, name, age):
        self.name = name
        self.age = age

p = Person("Alice", 30)
p.city = "New York"  # ❌ AttributeError: 'Person' object has no attribute 'city'
